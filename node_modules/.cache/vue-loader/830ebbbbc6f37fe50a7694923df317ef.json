{"remainingRequest":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\board\\components\\HandArea.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\board\\components\\HandArea.vue","mtime":1630652404527},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\css-loader\\dist\\cjs.js","mtime":1625907658834},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1625907660845},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\postcss-loader\\src\\index.js","mtime":1625907660114},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1625907638133},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js","mtime":1625907660845}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYnV0dG9uIHsKICBtYXJnaW4tdG9wOiAzNXB4Owp9Ci5mbGlwLWxpc3QtbW92ZSB7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuNXM7Cn0KLm5vLW1vdmUgewogIHRyYW5zaXRpb246IHRyYW5zZm9ybSAwczsKfQouZ2hvc3QgewogIG9wYWNpdHk6IDE7CiAgYmFja2dyb3VuZDogI2M4ZWJmYjsKfQouc29ydGFibGUtY2hvc2VuIHsKICBvcGFjaXR5OiAxOwp9Ci5jYXJkLWxpc3QgewogIG1pbi1oZWlnaHQ6IDIwcHg7CiAgbWF4LXdpZHRoOiAxMDAlOwp9Ci5oYW5kLWl0ZW0gewogIGN1cnNvcjogbW92ZTsKICBmbG9hdDogbGVmdDsKICAvL3dpZHRoOiA1MCU7CiAgLy9oZWlnaHQ6IDMwMHB4OwogIC8vYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi9QTV9CYWNrLmpwZyIpOwogIGJhY2tncm91bmQtc2l6ZTogMTAwJTsKICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0OwogIC8vYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOwogIHBhZGRpbmc6IDA7Cn0KLmhhbmQtaXRlbSBpIHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLmhhbmQtaXRlbSBpbWcgewogIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG9wYWNpdHk6IDA7Cn0KI2hhbmQtZGV0YWlsIHsKICB3aGl0ZS1zcGFjZTogbm9ybWFsOwp9Cg=="},{"version":3,"sources":["HandArea.vue"],"names":[],"mappingsqwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HandArea.vue","sourceRoot":"src/board/components","sourcesContent":["<template>\n  <div class=\"container\">\n    \n    <b-modal \n      id=\"hand-detail\"\n      scrollable\n      title=\"Card-Detail\"\n      hide-backdrop\n      >\n      <div class=\"card-container\">\n        <img :src=\"modalData === null ? '../PM_Back.jpg' : modalData.detail.img_url\" />\n        <div class=\"card-attr\">\n          <!--<b-table striped hover :items=\"modalData === null ? [] : addInArray(modalData.detail)\"></b-table>-->\n\n          <table class=\"table table-striped\">\n            <tbody>\n              <tr\n                v-for=\"(attr, index) in Object.entries(modalData.detail)\"\n                :key=\"attr.card_number\"\n                >\n                <th v-if=\"showTable(index)\">{{attr[0]}}</th>\n                <td \n                  :class=\"textChange.includes(index) ? 'text-danger' : 'text-dark'\"\n                  v-if=\"showTable(index)\"\n                  >\n                  {{attr[1]}}\n                </td>\n                <td>\n                  <b-button\n                    class=\"btn-line\"\n                    variant=\"outline-danger\"\n                    v-if=\"showTable(index) && showTableBtn(index)\"\n                    @click=\"addTableValue(index,attr[0])\"\n                    >\n                    +\n                  </b-button>\n                </td>\n                <td>\n                  <b-button\n                    class=\"btn-line\"\n                    variant=\"outline-danger\"\n                    v-if=\"showTable(index) && showTableBtn(index)\"\n                    @click=\"minusTableValue(index,attr[0])\"\n                    >\n                    -\n                  </b-button>\n                </td>\n                <td>\n                  <b-button\n                    class=\"btn-line\"\n                    variant=\"outline-danger\"\n                    v-if=\"showTable(index) && showTableBtn(index)\"\n                    @click=\"resetTableValue(index,attr[0])\"\n                    >\n                    Reset\n                  </b-button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </b-modal>\n\n    <draggable\n      class=\"card-list\"\n      tag=\"div\"\n      v-model=\"card_list\"\n      v-bind=\"dragOptions\"\n      :emptyInsertThreshold=\"150\"\n      @start=\"drag = true\"\n      @end=\"drop\"\n      :move=\"dropArea\"\n    >\n      <transition-group\n        id=\"hands\"\n        class=\"row\"\n        type=\"transition\"\n        :name=\"!drag ? 'flip-list' : null\"\n      >\n        \n        <div\n          class=\"hand-item col\"\n          v-for=\"(element, index) in card_list\"\n          :key=\"'ha-' + index\"\n          :class = \"index % 5 == 0 ? 'hand-item col-2 offset-1' : 'hand-item col-2' \"\n          v-b-modal.hand-detail\n          @click=\"openModal(element)\"\n          :style=\"{backgroundImage: 'url(' + element.detail.img_url + ')' }\"\n        >\n          <img src=\"../PM_Back.jpg\" />\n          <i\n            @click=\"element.fixed = !element.fixed\"\n            aria-hidden=\"true\"\n          >{{index}} , {{element.order}}</i>\n\n        </div>\n      </transition-group>\n    </draggable>  \n    \n  </div>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\n\n//const message = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nvar startTime , endTime;\n\nexport default {\n  name: \"hand-area\",\n  display: \"hand-area\",\n  order: 6,\n  components: {\n    draggable,\n  },\n  data() {\n    //const mapped_list = message.map((name, index) => {\n    //  return { name, order: index + 1};\n    //});\n    //console.log(mapped_list);\n\n    const mydata = require(\"../data.json\");\n    //console.log(mydata);\n    const tester = mydata.map((detail, index) => {\n      return {detail, order: index + 1, excost: 0, exsource: 0, exap: 0, exdp: 0,overlap: []};\n    });\n    console.log(tester);\n    //console.log(tester.slice(0,1));\n\n    return {\n      card_list: [],\n      drag: false,\n\n      modalData: tester[0],\n      lastPlace: null,\n      lastPlaceId: 0,\n      timer: setTimeout(() => {\n              this.lastPlace = null;\n              console.log(\"kill last place\");\n            },50),\n\n      textChange: [],\n    };\n  },\n  methods: {\n    openModal(data) {\n      console.log(\"jizz:\" + data);\n      this.modalData = data;\n    },\n    dropArea(place){\n      console.log(\"move\");\n      console.log(place);\n\n      clearTimeout(this.timer);\n\n      this.lastPlace = place.to.getAttribute(\"id\");\n      \n      this.timer = setTimeout(() => {\n        this.lastPlace = null;\n        console.log(\"kill last place\");\n      },50);\n\n      startTime = new Date();\n\n      if(place.to.getAttribute(\"id\") == \"decks\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"discards\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"ex-decks\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"excludeds\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"hands\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return true;\n\n      } else if(place.to.getAttribute(\"id\") == \"mains\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return true;\n      } else if(place.to.getAttribute(\"id\") == \"supports\") {\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return true;\n      } else if(place.to.getAttribute(\"id\") == \"points\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return true;\n      } else {\n        return true;\n      }\n    },\n    drop(data) {\n      this.drag = false;\n      let dropCard = this.dragCard;\n      let place = this.lastPlace;\n      endTime = new Date();\n\n      console.log(\"Time elapse: \" + Math.round(endTime - startTime));\n\n      // ms for re-set properDrop \n      let disable_first_drop = 70;\n\n      // check whether the card is at the same area\n      // but its ghost changed the position before it drop\n\n      //console.log(this.card_list[data.newDraggableIndex] === dropCard);\n      //if(data.to === data.from && this.card_list[data.newDraggableIndex] === dropCard){\n      //  // implies that the dragged card only changes its position in the original area\n      //  this.lastPlaceId = data.newDraggableIndex;\n      //  console.log(\"in change id\");\n      //}\n\n      if(place == \"decks\") {\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              if(data.to === data.from && this.card_list[data.newDraggableIndex] === dropCard){\n                // implies that the dragged card only changes its position in the original area\n                \n                this.lastPlaceId = data.newDraggableIndex;\n                this.$bus.$emit(\"add-to-deck-again\",dropCard,data.to.getAttribute(\"area-name\"));\n                this.card_list.splice(this.lastPlaceId,1);\n                console.log(\"in change id\");\n              }\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-deck-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-deck-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-deck-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              // since we use openTemp to refresh the list\n              // need to check whether the area-name is same with lastPlace\n\n              this.$bus.$emit(\"add-to-deck-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n\n              break;\n          }\n\n          console.log(\"hand to deck error\");\n        }\n\n        this.$bus.$emit(\"hand-to-deck\",dropCard,disable_first_drop);\n        console.log(\"emit dropCard to deck\");\n\n      } else if(place == \"discards\"){\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              //this.$bus.$emit(\"cancel-hand-drop\",data.newDraggableIndex);\n\n              // since you change the ghost position before drop to stack\n              // it might cause error since the lastPlaceId is no longer the same\n\n              if(data.to === data.from && this.card_list[data.newDraggableIndex] === dropCard){\n                // implies that the dragged card only changes its position in the original area\n                \n                this.lastPlaceId = data.newDraggableIndex;\n                this.$bus.$emit(\"add-to-discard-again\",dropCard,data.to.getAttribute(\"area-name\"));\n                this.card_list.splice(this.lastPlaceId,1);\n                console.log(\"in change id\");\n              }\n\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-discard-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-discard-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-discard-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              // since we use openTemp to refresh the list\n              // need to check whether the area-name is same with lastPlace\n\n              this.$bus.$emit(\"add-to-discard-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n\n              break;\n          }\n\n          console.log(\"hand to discard error\");\n        }\n\n        this.$bus.$emit(\"hand-to-discard\",dropCard,disable_first_drop);\n        console.log(\"emit dropCard to discard\");\n\n      } else if(place == \"ex-decks\") {\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              if(data.to === data.from && this.card_list[data.newDraggableIndex] === dropCard){\n                // implies that the dragged card only changes its position in the original area\n                \n                this.lastPlaceId = data.newDraggableIndex;\n                this.$bus.$emit(\"add-to-ex-deck-again\",dropCard,data.to.getAttribute(\"area-name\"));\n                this.card_list.splice(this.lastPlaceId,1);\n                console.log(\"in change id\");\n              }\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-ex-deck-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-ex-deck-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-ex-deck-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              // since we use openTemp to refresh the list\n              // need to check whether the area-name is same with lastPlace\n\n              this.$bus.$emit(\"add-to-ex-deck-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n\n              break;\n          }\n\n          console.log(\"hand to ex-deck error\");\n        }\n\n        this.$bus.$emit(\"hand-to-ex-deck\",dropCard,disable_first_drop);\n        console.log(\"emit dropCard to discard\");\n\n      } else if(place == \"excludeds\") {\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              if(data.to === data.from && this.card_list[data.newDraggableIndex] === dropCard){\n                // implies that the dragged card only changes its position in the original area\n                \n                this.lastPlaceId = data.newDraggableIndex;\n                this.$bus.$emit(\"add-to-excluded-again\",dropCard,data.to.getAttribute(\"area-name\"));\n                this.card_list.splice(this.lastPlaceId,1);\n                console.log(\"in change id\");\n              }\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-excluded-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-excluded-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              this.$bus.$emit(\"add-to-excluded-again\",dropCard,data.to.getAttribute(\"area-name\"));\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              // since we use openTemp to refresh the list\n              // need to check whether the area-name is same with lastPlace\n\n              this.$bus.$emit(\"add-to-excluded-again\",this.dragCard,data.to.getAttribute(\"area-name\"));\n\n              break;\n          }\n\n          console.log(\"hand to excluded error\");\n        }\n\n        this.$bus.$emit(\"hand-to-excluded\",dropCard,disable_first_drop);\n      }\n\n      console.log(\"test\");\n      console.log(place);\n      console.log(this.lastPlace);\n      console.log(data);\n      console.log(data.to);\n      console.log(data.to.getAttribute(\"area-name\"));\n      console.log(data.from);\n    },\n\n    // modal table\n    addInArray(data) {\n      return [data];\n    },\n    showTable(id) {\n      return (id != 0);\n    },\n    showTableBtn(id) {\n      return (id == 6 || id == 7 || id == 10 || id == 11);\n    },\n\n    // modify table value\n\n    // 6 is the index of cost property in detail\n    // 7 is the index of source property in detail\n    // 10 is the index of AP property in detail\n    // 11 is the index of DP property in detail\n\n    addTableValue(index, col) {\n      switch(col){\n        case \"cost\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.cost)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.excost += 1;\n          this.modalData.detail.cost = parseInt(this.modalData.detail.cost) + 1;\n          \n          if(this.modalData.excost == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.cost = parseInt(this.modalData.detail.cost) - parseInt(this.modalData.excost);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"source\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.source)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exsource += 1;\n          this.modalData.detail.source = parseInt(this.modalData.detail.source) + 1;\n          \n          if(this.modalData.exsource == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.source = parseInt(this.modalData.detail.source) - parseInt(this.modalData.exsource);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"AP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.AP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exap += 10;\n          this.modalData.detail.AP = parseInt(this.modalData.detail.AP) + 10;\n          \n          if(this.modalData.exap == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.AP = parseInt(this.modalData.detail.AP) - parseInt(this.modalData.exap);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"DP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.DP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exdp += 10;\n          this.modalData.detail.DP = parseInt(this.modalData.detail.DP) + 10;\n          \n          if(this.modalData.exdp == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.DP = parseInt(this.modalData.detail.DP) - parseInt(this.modalData.exdp);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n      }\n    },\n    minusTableValue(index, col) {\n      switch(col){\n        case \"cost\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.cost)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.excost -= 1;\n          this.modalData.detail.cost = parseInt(this.modalData.detail.cost) - 1;\n          \n          if(this.modalData.excost == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.cost = parseInt(this.modalData.detail.cost) - parseInt(this.modalData.excost);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"source\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.source)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exsource -= 1;\n          this.modalData.detail.source = parseInt(this.modalData.detail.source) - 1;\n          \n          if(this.modalData.exsource == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.source = parseInt(this.modalData.detail.source) - parseInt(this.modalData.exsource);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"AP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.AP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exap -= 10;\n          this.modalData.detail.AP = parseInt(this.modalData.detail.AP) - 10;\n          \n          if(this.modalData.exap == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.AP = parseInt(this.modalData.detail.AP) - parseInt(this.modalData.exap);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n        case \"DP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.DP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.exdp -= 10;\n          this.modalData.detail.DP = parseInt(this.modalData.detail.DP) - 10;\n          \n          if(this.modalData.exdp == 0){\n            let id = this.textChange.indexOf(index);\n            if(id > -1){\n              this.textChange.splice(id,1);\n            }\n            this.modalData.detail.DP = parseInt(this.modalData.detail.DP) - parseInt(this.modalData.exdp);\n          } else {\n            if(this.textChange.includes(index) == false){\n              this.textChange.push(index);\n            }\n          }\n          break;\n      }\n    },\n    resetTableValue(index, col) {\n\n      let id = this.textChange.indexOf(index);\n      if(id > -1){\n        this.textChange.splice(id,1);\n      }\n\n      switch(col){\n        case \"cost\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.cost)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.detail.cost = parseInt(this.modalData.detail.cost) - parseInt(this.modalData.excost);\n          this.modalData.excost = 0;\n          \n          break;\n        case \"source\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.source)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.detail.source = parseInt(this.modalData.detail.source) - parseInt(this.modalData.exsource);\n          this.modalData.exsource = 0;\n          \n          break;\n        case \"AP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.AP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.detail.AP = parseInt(this.modalData.detail.AP) - parseInt(this.modalData.exap);\n          this.modalData.exap = 0;\n          \n          break;\n        case \"DP\":\n          // check if not a number\n          if(isNaN(parseInt(this.modalData.detail.DP)) == true){\n            // not a number!\n            return;\n          }\n\n          this.modalData.detail.DP = parseInt(this.modalData.detail.DP) - parseInt(this.modalData.exdp);\n          this.modalData.exdp = 0;\n\n          break;\n      }\n\n      console.log(this.textChange);\n    },\n  },\n  computed: {\n    dragOptions() {\n      return {\n        animation: 200,\n        group: \"description\",\n        disabled: false,\n        ghostClass: \"ghost\",\n      };\n    }\n  },\n  mounted() {\n    this.$bus.$on(\"draw-from-deck\",(drawn_card_list) => {\n      this.card_list = this.card_list.concat(drawn_card_list);\n    });\n\n    this.$bus.$on(\"check-top-to-hand\",(card) => {\n      this.card_list.push(card);\n    });\n\n    this.$bus.$on(\"check-bottom-to-hand\",(card) => {\n      this.card_list.push(card);\n    });\n\n    this.$bus.$on(\"able-to-remove\",(where) => {\n      if(where == \"hand\"){\n        console.log(\"lastPlaceId: \" + this.lastPlaceId);\n        this.card_list.splice(this.lastPlaceId,1);\n      }\n    });\n\n    this.$bus.$on(\"cancel-hand-drop\",(id) => {\n      this.card_list.splice(id,1);\n      console.log(\"cancel hand drop: \" + id);\n    });\n\n    // load\n\n    this.$bus.$on(\"load-to-hand\",(cards) => {\n      console.log(\"jiddzzzzz\");\n\n      this.card_list = cards;\n      this.modalData = this.card_list[0];\n\n      console.log(this.card_list);\n    });\n  }\n};\n</script>\n\n<style>\n.button {\n  margin-top: 35px;\n}\n.flip-list-move {\n  transition: transform 0.5s;\n}\n.no-move {\n  transition: transform 0s;\n}\n.ghost {\n  opacity: 1;\n  background: #c8ebfb;\n}\n.sortable-chosen {\n  opacity: 1;\n}\n.card-list {\n  min-height: 20px;\n  max-width: 100%;\n}\n.hand-item {\n  cursor: move;\n  float: left;\n  //width: 50%;\n  //height: 300px;\n  //background-image: url(\"../PM_Back.jpg\");\n  background-size: 100%;\n  background-repeat: no-repeat;\n  //background-position: center;\n  padding: 0;\n}\n.hand-item i {\n  cursor: pointer;\n}\n.hand-item img {\n  vertical-align: top;\n  max-width: 100%;\n  opacity: 0;\n}\n#hand-detail {\n  white-space: normal;\n}\n</style>\n"]}]}