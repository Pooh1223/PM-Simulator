{"remainingRequest":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\components\\Deck.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\components\\Deck.vue","mtime":1627446021490},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLmJ1dHRvbiB7DQogIG1hcmdpbi10b3A6IDM1cHg7DQp9DQouZmxpcC1saXN0LW1vdmUgew0KICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41czsNCn0NCi5uby1tb3ZlIHsNCiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDBzOw0KfQ0KLmdob3N0IHsNCiAgb3BhY2l0eTogMC41Ow0KICBiYWNrZ3JvdW5kOiAjYzhlYmZiOw0KfQ0KLmRlY2sgew0KICBjdXJzb3I6IGNsaWNrOw0KICBmbG9hdDogbGVmdDsNCiAgLy93aWR0aDogNTAlOw0KICAvL2hlaWdodDogMzAwcHg7DQogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vUE1fQmFjay5qcGciKTsNCiAgYmFja2dyb3VuZC1zaXplOiAxMDAlOw0KICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0Ow0KICAvL2JhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsNCiAgcGFkZGluZzogMXB4Ow0KfQ0KLmRlY2sgaW1nIHsNCiAgdmVydGljYWwtYWxpZ246IHRvcDsNCiAgbWF4LXdpZHRoOiAxMDAlOw0KICBvcGFjaXR5OiAwOw0KfQ0KLmRlY2stY2FyZHMgew0KICBwYWRkaW5nOiAwcHg7DQp9DQojZGVjay1kcmF3IHsNCiAgcGFkZGluZy1ib3R0b206IDEwcHg7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCiNkZWNrLW9wdCB7DQogIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCi5idG4tbGluZSB7DQogIG1hcmdpbi1yaWdodDogMnB4Ow0KfQ0KI2NoZWNrX2xpc3Qgew0KICAvL292ZXJmbG93LXk6IGF1dG87DQogIC8vb3ZlcmZsb3c6IHNjcm9sbDsNCn0NCi5jaGVjay1jYXJkcyB7DQogIGN1cnNvcjogY2xpY2s7DQogIGZsb2F0OiBsZWZ0Ow0KICAvL3dpZHRoOiA1MCU7DQogIC8vaGVpZ2h0OiAzMDBweDsNCiAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCIuLi9QTV9CYWNrLmpwZyIpOw0KICBiYWNrZ3JvdW5kLXNpemU6IDEwMCU7DQogIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7DQogIC8vYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyOw0KICBwYWRkaW5nLWJvdHRvbTogNXB4Ow0KfQ0KLmNoZWNrLWNhcmRzIGltZyB7DQogIHZlcnRpY2FsLWFsaWduOiB0b3A7DQogIG1heC13aWR0aDogMTAwJTsNCiAgb3BhY2l0eTogMDsNCn0NCg0K"},{"version":3,"sources":["Deck.vue"],"names":[],"mappingsggBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Deck.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n      <!--<div class=\"deck-cards\"\r\n        @click=\"toggleMainDialog\">\r\n        <img src=\"../PM_Back.jpg\" />\r\n      </div>-->\r\n\r\n      <draggable\r\n        class=\"deck-list\"\r\n        tag=\"div\"\r\n        v-model=\"card_list\"\r\n        v-bind=\"dragOptions\"\r\n        @start=\"drag = true\"\r\n        @end=\"drag = false\"\r\n        :move=\"isLastCard\"\r\n        >\r\n        <transition-group\r\n          id=\"deck\"\r\n          type=\"transition\"\r\n          :name=\"!drag ? 'flip-list' : null\"\r\n        >\r\n          <div\r\n            class=\"deck\"\r\n            v-for=\"(element,index) in card_list\"\r\n            :key=\"'de-' + index\"\r\n          >\r\n            <div\r\n              class=\"deck-cards\"\r\n              v-if=\"index == 0\"\r\n              @click=\"toggleMainDialog\"\r\n              >\r\n                <img src=\"../PM_Back.jpg\" />\r\n                <i\r\n                  :class=\"\r\n                    element.fixed ? 'fa fa-anchor' : 'glyphicon glyphicon-pushpin'\r\n                  \"\r\n                  @click=\"element.fixed = !element.fixed\"\r\n                  aria-hidden=\"true\"\r\n                ></i>\r\n            </div>\r\n            \r\n          </div>\r\n        </transition-group>\r\n      </draggable>\r\n\r\n      <dialog-drag \r\n        id=\"dialog-1\"\r\n        :options= \"{x: mainDialogX,y: mainDialogY}\"\r\n        title=\"Options\"\r\n        v-if=\"showMainDialog\"\r\n        @move=\"posMainLog\"\r\n        @close=\"toggleMainDialog\">\r\n\r\n        <b-form-input\r\n          v-model=\"preText\"\r\n          type=\"number\"\r\n          placeholder=\"number you want to draw\"\r\n          :state=\"validDraw\"\r\n          @click.stop=\"shout\"\r\n          >\r\n        </b-form-input>\r\n        <div style=\"display:inline-block;\">\r\n          <b-button\r\n            class=\"btn-line\"\r\n            :disabled=\"preText <= 0\"\r\n            variant=\"outline-danger\"\r\n            @click=\"draw\"\r\n            >\r\n            Draw\r\n          </b-button>\r\n          <b-button\r\n            class=\"btn-line\"\r\n            :disabled=\"preText <= 0\"\r\n            variant=\"outline-danger\"\r\n            @click=\"toggleCheckDialog($event,'Top')\"\r\n            >\r\n              Check top\r\n          </b-button>\r\n          <b-button\r\n            class=\"btn-line\"\r\n            :disabled=\"preText <= 0\"\r\n            variant=\"outline-danger\"\r\n            @click=\"toggleCheckDialog($event,'Bottom')\"\r\n            >\r\n              Check bottom\r\n          </b-button>\r\n        </div>\r\n\r\n        <div>\r\n          <b-button\r\n              variant=\"outline-danger\"\r\n              @click=\"shuffle('deck')\"\r\n              >\r\n              Shuffle\r\n          </b-button>\r\n        </div>\r\n\r\n        <b-form-invalid-feedback id=\"input-live-feedback\">\r\n          Number should be larger than 0\r\n        </b-form-invalid-feedback>\r\n\r\n      </dialog-drag>\r\n\r\n\r\n\r\n      <dialog-drag\r\n        id=\"check_list\"\r\n        class=\"dialog-3\"\r\n        :options= \"{x: checkDialogX,y: checkDialogY,width: 250}\"\r\n        :title=\"checkTitle\"\r\n        v-if=\"showCheckDialog\"\r\n        @drag-start=\"drag_dialog=true\"\r\n        @pin=\"pinPos\"\r\n        @move=\"posCheckLog\"\r\n        @close=\"toggleCheckDialog\"\r\n        >\r\n\r\n        <b-button\r\n          variant=\"outline-primary\"\r\n          @click=\"returnTop\"\r\n          style=\"width: 100%;\"\r\n          >\r\n          Return top\r\n        </b-button>\r\n        <b-button\r\n          variant=\"outline-primary\"\r\n          @click=\"returnBottom\"\r\n          style=\"width: 100%;\"\r\n          >\r\n          Return bottom\r\n        </b-button>\r\n        <b-button\r\n          variant=\"outline-primary\"\r\n          @click=\"shuffle('check')\"\r\n          style=\"width: 100%;\"\r\n          >\r\n          Return and Shuffle\r\n        </b-button>\r\n\r\n        <draggable\r\n          class=\"check-card-list\"\r\n          tag=\"div\"\r\n          v-model=\"checkCardList\"\r\n          v-bind=\"dragOptions\"\r\n          @start=\"dragCardStart\"\r\n          @end=\"dragCardEnd\"\r\n          :move=\"disableMove\"\r\n        >\r\n          <transition-group\r\n            type=\"transition\"\r\n            :name=\"!drag ? 'flip-list' : null\"\r\n          >\r\n            \r\n            <div\r\n              class=\"check-item row\"\r\n              v-for=\"(element, index) in checkCardList\"\r\n              :key=\"'chk-' + index\"\r\n            >\r\n              <div\r\n                class=\"check-cards col-6\"\r\n                align=\"center\"\r\n                style=\"height: 100%; display: inline-block;\">\r\n\r\n                <img src=\"../PM_Back.jpg\" />\r\n                <i\r\n                  :class=\"\r\n                    element.fixed ? 'fa fa-anchor' : 'glyphicon glyphicon-pushpin'\r\n                  \"\r\n                  @click=\"element.fixed = !element.fixed\"\r\n                  aria-hidden=\"true\"\r\n                >{{index}} , {{element.order}}</i>\r\n              </div>\r\n              \r\n              <div\r\n                class=\"col-6 my-auto\"\r\n                style=\"display: inline-block;\"\r\n                >\r\n                <b-button\r\n                  variant=\"outline-primary\"\r\n                  @click=\"toHand(index)\"\r\n                  style=\"width: 100%;\"\r\n                  >\r\n                  Hand\r\n                </b-button>\r\n                <b-button\r\n                  variant=\"outline-primary\"\r\n                  @click=\"toDiscard(index)\"\r\n                  style=\"width: 100%; padding-left: 0; padding-right: 0;\"\r\n                  >\r\n                  Discard\r\n                </b-button>\r\n              </div>\r\n\r\n            </div>\r\n          </transition-group>\r\n        </draggable>\r\n\r\n      </dialog-drag>\r\n\r\n      <b-button\r\n        id=\"deck-draw\"\r\n        class=\"btn-block\"\r\n        variant=\"success\"\r\n        @click=\"openTemp\"\r\n        >\r\n        Draw\r\n      </b-button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport draggable from \"vuedraggable\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport DialogDrag from 'vue-dialog-drag';\r\n\r\nexport default {\r\n  name: \"deck\",\r\n  display: \"Deck\",\r\n  order: 6,\r\n  components: {\r\n    draggable,\r\n    DialogDrag,\r\n  },\r\n  data() {\r\n    const message = [];\r\n\r\n    for(let i = 0;i < 25;++i){\r\n      message.push(toString(i + 1));\r\n    }\r\n    \r\n    const mapped_list = message.map((name, index) => {\r\n      return { name, order: index + 1 };\r\n    });\r\n\r\n    return {\r\n      drag: false,\r\n      after_drag_card: false,\r\n\r\n      card_list: mapped_list,\r\n      showMainDialog: false,\r\n      preText: 2,\r\n      mainDialogX: 500,\r\n      mainDialogY: 500,\r\n\r\n      showCheckDialog: false,\r\n      checkDialogX: 550,\r\n      checkDialogY: 550,\r\n      tempDialogX: 0,\r\n      tempDialogY: 0,\r\n      checkTitle: \"1\",\r\n      checkCardList: [],\r\n    };\r\n  },\r\n  methods: {\r\n    openTemp() {\r\n      this.$bus.$emit(\"open-from-deck\",\"Deck\",this.card_list);\r\n      console.log(\"deck: sent!\");\r\n    },\r\n    toggleMainDialog(data) {\r\n      this.showMainDialog = !this.showMainDialog;\r\n      console.log(data);\r\n    },\r\n    posMainLog(data) {\r\n      this.mainDialogX = data.x;\r\n      this.mainDialogY = data.y;\r\n      //console.log(data);\r\n    },\r\n\r\n    // functions in draw option\r\n\r\n    draw() {\r\n      let num = this.preText;\r\n\r\n      if(num > this.card_list.length){\r\n        num = this.card_list.length;\r\n      }\r\n\r\n      let temp_card_list = [];\r\n\r\n      for(let i = 0;i < num;++i){\r\n        temp_card_list.push(this.card_list[i]);\r\n      }\r\n\r\n      this.card_list.splice(0,num);\r\n\r\n      this.$bus.$emit(\"draw-from-deck\",temp_card_list);\r\n    },\r\n    toggleCheckDialog(data,str) {\r\n      this.showCheckDialog = !this.showCheckDialog;\r\n\r\n      this.checkTitle = str;\r\n\r\n      switch(str){\r\n        case \"Top\":\r\n          this.checkTop();\r\n          break;\r\n        case \"Bottom\":\r\n          this.checkBottom();\r\n          break;\r\n      }\r\n\r\n      console.log(\"check dialog: \" + data);\r\n      //console.log(str);\r\n    },\r\n    posCheckLog(data) {\r\n      // track position only when not dragging cards\r\n\r\n      if(this.drag == false){\r\n        this.checkDialogX = data.x;\r\n        this.checkDialogY = data.y;\r\n      }\r\n\r\n      if(this.after_drag_card == true){\r\n        this.after_drag_card = false;\r\n        this.checkDialogX = this.tempDialogX;\r\n        this.checkDialogY = this.tempDialogY;\r\n      }\r\n\r\n      //console.log(\"move\");\r\n      //console.log(data);\r\n      //console.log(this.drag);\r\n      //console.log(this.drag_dialog);\r\n    },\r\n    pinPos(data) {\r\n      console.log(data.pinned);\r\n\r\n      // the pinned dialog has a margin around it\r\n\r\n      if(data.pinned == true){\r\n        this.checkDialogX -= 48;\r\n        this.checkDialogY -= 48;\r\n      } else {\r\n        this.checkDialogX += 48;\r\n        this.checkDialogY += 48;\r\n      }\r\n      \r\n      console.log(\"pin\");\r\n      console.log(data);\r\n    },\r\n    dragCardStart() {\r\n      this.drag = true;\r\n      this.tempDialogX = this.checkDialogX;\r\n      this.tempDialogY = this.checkDialogY;\r\n\r\n      //console.log(\"start\");\r\n      //console.log(this.tempDialogX + \" \" + this.tempDialogY);\r\n    },\r\n    dragCardEnd() {\r\n      this.drag = false;\r\n      this.checkDialogX = this.tempDialogX;\r\n      this.checkDialogY = this.tempDialogY;\r\n\r\n      this.after_drag_card = true;\r\n\r\n      //console.log(\"end\");\r\n      //console.log(this.tempDialogX + \" \" + this.tempDialogY);\r\n    },\r\n    checkTop() {\r\n      let num = this.preText;\r\n\r\n      if(num > this.card_list.length){\r\n        num = this.card_list.length;\r\n      }\r\n\r\n      this.checkCardList = this.card_list.slice(0,num);\r\n    },\r\n    checkBottom() {\r\n      let num = this.preText;\r\n\r\n      if(num > this.card_list.length){\r\n        num = this.card_list.length;\r\n      }\r\n\r\n      this.checkCardList = this.card_list.slice(this.card_list.length - num,this.card_list.length);\r\n    },\r\n    toHand(id) {\r\n\r\n      let dis_id = this.card_list.length - this.preText + id;\r\n      let selected = this.checkTitle == \"Top\" ? this.card_list[id] : this.card_list[dis_id];\r\n\r\n      switch(this.checkTitle){\r\n        case \"Top\":\r\n          // remove both check card list and card list\r\n          this.checkCardList.splice(id,1);\r\n          this.card_list.splice(id,1);\r\n\r\n          // emit to hand to add card\r\n          this.$bus.$emit(\"check-top-to-hand\",selected);\r\n\r\n          break;\r\n\r\n        case \"Bottom\":\r\n          // remove both check card list and card list\r\n          this.checkCardList.splice(id,1);\r\n          this.card_list.splice(id,1);\r\n\r\n          // emit to hand to add card\r\n          this.$bus.$emit(\"check-bottom-to-hand\",selected);\r\n\r\n          break;\r\n      }\r\n    },\r\n    toDiscard(id) {\r\n      let dis_id = this.card_list.length - this.preText + id;\r\n      let selected = this.checkTitle == \"Top\" ? this.card_list[id] : this.card_list[dis_id];\r\n\r\n      switch(this.checkTitle){\r\n        case \"Top\":\r\n          // remove both check card list and card list\r\n          this.checkCardList.splice(id,1);\r\n          this.card_list.splice(id,1);\r\n\r\n          // emit to hand to add card\r\n          this.$bus.$emit(\"check-top-to-discard\",selected);\r\n\r\n          break;\r\n\r\n        case \"Bottom\":\r\n          // remove both check card list and card list\r\n          this.checkCardList.splice(id,1);\r\n          this.card_list.splice(id,1);\r\n\r\n          // emit to hand to add card\r\n          this.$bus.$emit(\"check-bottom-to-discard\",selected);\r\n\r\n          break;\r\n      }\r\n    },\r\n    returnTop() {\r\n      switch(this.checkTitle){\r\n        case \"Top\":\r\n          // nothing need to do\r\n          break;\r\n        case \"Bottom\":\r\n          // shift will pop the first element and return it\r\n          for(let i = 0;i < this.preText;++i){\r\n            this.card_list.unshift(this.card_list.pop());\r\n          }\r\n          break;\r\n      }\r\n\r\n      this.toggleCheckDialog();\r\n    },\r\n    returnBottom() {\r\n      switch(this.checkTitle){\r\n        case \"Top\":\r\n          // shift will pop the first element and return it\r\n          for(let i = 0;i < this.preText;++i){\r\n            this.card_list.push(this.card_list.shift());\r\n          }\r\n\r\n          break;\r\n        case \"Bottom\":\r\n          // nothing need to do\r\n          break;\r\n      }\r\n\r\n      this.toggleCheckDialog();\r\n    },\r\n    shuffle(where) {\r\n      for(let i = this.card_list.length - 1;i > 0;--i){\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [this.card_list[i],this.card_list[j]] = [this.card_list[j],this.card_list[i]];\r\n      }\r\n\r\n      if(where == \"check\"){\r\n        this.toggleCheckDialog();\r\n      }\r\n    },\r\n    disableMove() {\r\n      return false;\r\n    },\r\n    isLastCard() {\r\n      //if(this.card_list.length == 1) return false;\r\n      //else return true;\r\n      return false;\r\n    },\r\n  },\r\n  computed: {\r\n    dragOptions() {\r\n      return {\r\n        animation: 200,\r\n        group: \"description\",\r\n        disabled: false,\r\n        ghostClass: \"ghost\",\r\n      };\r\n    },\r\n    validDraw() {\r\n      console.log(this.preText);\r\n      return this.preText > 0 ? true : false;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$bus.$on(\"add-to-deck\",(id,card) => {\r\n      console.log(\"add card:\" + card);\r\n      this.card_list.splice(id,0,card);\r\n    });\r\n\r\n    this.$bus.$on(\"remove-to-deck\",(id) => {\r\n      console.log(\"remove \" + id + \"-th card\");\r\n      this.card_list.splice(id,1);\r\n    });\r\n\r\n    this.$bus.$on(\"hand-to-deck\",(card) => {\r\n      this.card_list.unshift(card);\r\n      console.log(this.card_list);\r\n    });\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n.button {\r\n  margin-top: 35px;\r\n}\r\n.flip-list-move {\r\n  transition: transform 0.5s;\r\n}\r\n.no-move {\r\n  transition: transform 0s;\r\n}\r\n.ghost {\r\n  opacity: 0.5;\r\n  background: #c8ebfb;\r\n}\r\n.deck {\r\n  cursor: click;\r\n  float: left;\r\n  //width: 50%;\r\n  //height: 300px;\r\n  background-image: url(\"../PM_Back.jpg\");\r\n  background-size: 100%;\r\n  background-repeat: no-repeat;\r\n  //background-position: center;\r\n  padding: 1px;\r\n}\r\n.deck img {\r\n  vertical-align: top;\r\n  max-width: 100%;\r\n  opacity: 0;\r\n}\r\n.deck-cards {\r\n  padding: 0px;\r\n}\r\n#deck-draw {\r\n  padding-bottom: 10px;\r\n  text-align: center;\r\n}\r\n#deck-opt {\r\n  text-align: center;\r\n}\r\n.btn-line {\r\n  margin-right: 2px;\r\n}\r\n#check_list {\r\n  //overflow-y: auto;\r\n  //overflow: scroll;\r\n}\r\n.check-cards {\r\n  cursor: click;\r\n  float: left;\r\n  //width: 50%;\r\n  //height: 300px;\r\n  background-image: url(\"../PM_Back.jpg\");\r\n  background-size: 100%;\r\n  background-repeat: no-repeat;\r\n  //background-position: center;\r\n  padding-bottom: 5px;\r\n}\r\n.check-cards img {\r\n  vertical-align: top;\r\n  max-width: 100%;\r\n  opacity: 0;\r\n}\r\n\r\n</style>\r\n\r\n<style src=\"vue-dialog-drag/dist/vue-dialog-drag.css\"></style>\r\n<style src=\"vue-dialog-drag/dist/vue-drop-area.css\"></style>\r\n\r\n<!-- optional dialog styles, see example -->\r\n<style src=\"vue-dialog-drag/dist/dialog-styles.css\"></style>"]}]}