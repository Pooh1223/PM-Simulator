{"remainingRequest":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\components\\HandArea.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\src\\components\\HandArea.vue","mtime":1627887359933},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Program\\Code\\Web\\Project\\precious_memories1\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5idXR0b24gewogIG1hcmdpbi10b3A6IDM1cHg7Cn0KLmZsaXAtbGlzdC1tb3ZlIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC41czsKfQoubm8tbW92ZSB7CiAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDBzOwp9Ci5naG9zdCB7CiAgb3BhY2l0eTogMTsKICBiYWNrZ3JvdW5kOiAjYzhlYmZiOwp9Ci5zb3J0YWJsZS1jaG9zZW4gewogIG9wYWNpdHk6IDE7Cn0KLmNhcmQtbGlzdCB7CiAgbWluLWhlaWdodDogMjBweDsKICBtYXgtd2lkdGg6IDEwMCU7Cn0KLml0ZW0gewogIGN1cnNvcjogbW92ZTsKICBmbG9hdDogbGVmdDsKICAvL3dpZHRoOiA1MCU7CiAgLy9oZWlnaHQ6IDMwMHB4OwogIGJhY2tncm91bmQtaW1hZ2U6IHVybCgiLi4vUE1fQmFjay5qcGciKTsKICBiYWNrZ3JvdW5kLXNpemU6IDEwMCU7CiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAvL2JhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICBwYWRkaW5nOiAwOwp9Ci5pdGVtIGkgewogIGN1cnNvcjogcG9pbnRlcjsKfQouaXRlbSBpbWcgewogIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgbWF4LXdpZHRoOiAxMDAlOwogIG9wYWNpdHk6IDA7Cn0KCg=="},{"version":3,"sources":["HandArea.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HandArea.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    \n    <draggable\n      class=\"card-list\"\n      tag=\"div\"\n      v-model=\"card_list\"\n      v-bind=\"dragOptions\"\n      @start=\"drag = true\"\n      @end=\"drop\"\n      :move=\"dropArea\"\n    >\n      <transition-group\n        id=\"hands\"\n        class=\"row\"\n        type=\"transition\"\n        :name=\"!drag ? 'flip-list' : null\"\n      >\n        \n        <div\n          class=\"item col\"\n          v-for=\"(element, index) in card_list\"\n          :key=\"'ha-' + index\"\n          :class = \"index % 5 == 0 ? 'item col-2 offset-1' : 'item col-2' \"\n        >\n          <img src=\"../PM_Back.jpg\" />\n          <i\n            @click=\"element.fixed = !element.fixed\"\n            aria-hidden=\"true\"\n          >{{index}} , {{element.order}}</i>\n\n        </div>\n      </transition-group>\n    </draggable>  \n    \n  </div>\n</template>\n\n<script>\nimport draggable from \"vuedraggable\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap-vue/dist/bootstrap-vue.css';\n\nconst message = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nexport default {\n  name: \"hand-area\",\n  display: \"hand-area\",\n  order: 6,\n  components: {\n    draggable,\n  },\n  data() {\n    const rowofcard = 5;\n    const mapped_list = message.map((name, index) => {\n      return { name, order: index + 1 };\n    });\n\n    return {\n      row_of_card: rowofcard,\n      card_list: mapped_list,\n      drag: false,\n      text: \"I am popover <b>component</b> content!\",\n      modalData: null,\n      lastPlace: null,\n      lastPlaceId: 0,\n    };\n  },\n  methods: {\n    openModal(data) {\n      console.log(\"jizz:\" + data);\n      this.modalData = data;\n    },\n    dropArea(place){\n      console.log(\"move\");\n      console.log(place);\n\n      this.lastPlace = place.to.getAttribute(\"id\");\n\n      if(place.to.getAttribute(\"id\") == \"decks\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"discards\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"ex-decks\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"excludeds\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return false;\n\n      } else if(place.to.getAttribute(\"id\") == \"hands\"){\n\n        this.lastPlaceId = place.draggedContext.index;\n        this.dragCard = place.draggedContext.element;\n        return true;\n\n      } else {\n        return true;\n      }\n    },\n    drop(data) {\n      this.drag = false;\n      let dropCard = this.dragCard;\n\n      // ms for re-set properDrop \n      let disable_first_drop = 50;\n\n      if(this.lastPlace == \"decks\") {\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              this.$bus.$emit(\"cancel-hand-drop\",data.newDraggableIndex);\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              if(data.to.getAttribute(\"area-name\") == \"Deck\"){\n                this.$bus.$emit(\"add-to-deck-again\",this.dragCard);\n              }\n\n              break;\n          }\n\n          console.log(\"hand to deck error\");\n        }\n\n        this.$bus.$emit(\"hand-to-deck\",dropCard);\n        console.log(\"emit dropCard to deck\");\n\n      } else if(this.lastPlace == \"discards\"){\n\n        //this.$bus.$emit(\"hand-to-discard\",dropCard);\n        //console.log(\"emit dropCard to discard\");\n\n        if(this.card_list[this.lastPlaceId] != this.dragCard || typeof this.card_list[this.lastPlaceId] == \"undefined\"){\n\n          disable_first_drop = 0;\n\n          // ghost probably lie in somewhere else\n\n          switch(data.to.getAttribute(\"id\")){\n            case \"hands\":\n              this.$bus.$emit(\"cancel-hand-drop\",data.newDraggableIndex);\n              break;\n            case \"mains\":\n              this.$bus.$emit(\"cancel-main-drop\",data.newDraggableIndex);\n              break;\n            case \"supports\":\n              this.$bus.$emit(\"cancel-support-drop\",data.newDraggableIndex);\n              break;\n            case \"points\":\n              this.$bus.$emit(\"cancel-point-drop\",data.newDraggableIndex);\n              break;\n            case \"temp-area\":\n              // special case: it will affect deck-stack area too\n              //this.$bus.$emit(\"cancel-temp-drop\",data.newDraggableIndex);\n\n              // args_1: where, args_2: index\n              this.$bus.$emit(\"cancel-stack-drop\",data.to.getAttribute(\"area-name\"),data.newDraggableIndex);\n\n              // case when temp area is the same with stack\n              if(data.to.getAttribute(\"area-name\") == \"Discard\"){\n                this.$bus.$emit(\"add-to-discard-again\",this.dragCard);\n              }\n\n              break;\n          }\n\n          console.log(\"hand to discard error\");\n        }\n\n        this.$bus.$emit(\"hand-to-discard\",dropCard,disable_first_drop);\n        console.log(\"emit dropCard to discard\");\n\n      } else if(this.lastPlace == \"ex-decks\") {\n\n        this.$bus.$emit(\"hand-to-ex-deck\",dropCard);\n\n      } else if(this.lastPlace == \"excludeds\") {\n\n        this.$bus.$emit(\"hand-to-excluded\",dropCard);\n      }\n\n      console.log(\"test\");\n      console.log(data);\n      console.log(data.to);\n      console.log(data.to.getAttribute(\"area-name\"));\n      console.log(data.from);\n    },\n    dropException(){\n\n    },\n  },\n  computed: {\n    dragOptions() {\n      return {\n        animation: 200,\n        group: \"description\",\n        disabled: false,\n        ghostClass: \"ghost\",\n      };\n    },\n  },\n  mounted() {\n    this.$bus.$on(\"draw-from-deck\",(drawn_card_list) => {\n      this.card_list = this.card_list.concat(drawn_card_list);\n    });\n\n    this.$bus.$on(\"check-top-to-hand\",(card) => {\n      this.card_list.push(card);\n    });\n\n    this.$bus.$on(\"check-bottom-to-hand\",(card) => {\n      this.card_list.push(card);\n    });\n\n    this.$bus.$on(\"able-to-remove\",(where) => {\n      if(where == \"hand\"){\n        console.log(\"lastPlaceId: \" + this.lastPlaceId);\n        this.card_list.splice(this.lastPlaceId,1);\n      }\n    });\n  }\n};\n</script>\n\n<style>\n.button {\n  margin-top: 35px;\n}\n.flip-list-move {\n  transition: transform 0.5s;\n}\n.no-move {\n  transition: transform 0s;\n}\n.ghost {\n  opacity: 1;\n  background: #c8ebfb;\n}\n.sortable-chosen {\n  opacity: 1;\n}\n.card-list {\n  min-height: 20px;\n  max-width: 100%;\n}\n.item {\n  cursor: move;\n  float: left;\n  //width: 50%;\n  //height: 300px;\n  background-image: url(\"../PM_Back.jpg\");\n  background-size: 100%;\n  background-repeat: no-repeat;\n  //background-position: center;\n  padding: 0;\n}\n.item i {\n  cursor: pointer;\n}\n.item img {\n  vertical-align: top;\n  max-width: 100%;\n  opacity: 0;\n}\n\n</style>\n"]}]}